// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: road_boundary.proto

#include "road_boundary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_road_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinReaderMsg_road_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundaryPointsMsg_road_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudMapperMsg_road_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePointsMsg_road_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundSegmentationMsg_road_5fboundary_2eproto;
namespace RoadBoundary {
class RoadBoundaryMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadBoundaryMsg> _instance;
} _RoadBoundaryMsg_default_instance_;
class CloudMapperMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudMapperMsg> _instance;
} _CloudMapperMsg_default_instance_;
class BinReaderMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinReaderMsg> _instance;
} _BinReaderMsg_default_instance_;
class GroundSegmentationMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundSegmentationMsg> _instance;
} _GroundSegmentationMsg_default_instance_;
class FeaturePointsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeaturePointsMsg> _instance;
} _FeaturePointsMsg_default_instance_;
class BoundaryPointsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryPointsMsg> _instance;
} _BoundaryPointsMsg_default_instance_;
}  // namespace RoadBoundary
static void InitDefaultsscc_info_BinReaderMsg_road_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_BinReaderMsg_default_instance_;
    new (ptr) ::RoadBoundary::BinReaderMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinReaderMsg_road_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BinReaderMsg_road_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_BoundaryPointsMsg_road_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_BoundaryPointsMsg_default_instance_;
    new (ptr) ::RoadBoundary::BoundaryPointsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundaryPointsMsg_road_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoundaryPointsMsg_road_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_CloudMapperMsg_road_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_CloudMapperMsg_default_instance_;
    new (ptr) ::RoadBoundary::CloudMapperMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudMapperMsg_road_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloudMapperMsg_road_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_FeaturePointsMsg_road_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_FeaturePointsMsg_default_instance_;
    new (ptr) ::RoadBoundary::FeaturePointsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePointsMsg_road_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeaturePointsMsg_road_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_GroundSegmentationMsg_road_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_GroundSegmentationMsg_default_instance_;
    new (ptr) ::RoadBoundary::GroundSegmentationMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundSegmentationMsg_road_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroundSegmentationMsg_road_5fboundary_2eproto}, {}};

static void InitDefaultsscc_info_RoadBoundaryMsg_road_5fboundary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadBoundary::_RoadBoundaryMsg_default_instance_;
    new (ptr) ::RoadBoundary::RoadBoundaryMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoadBoundaryMsg_road_5fboundary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RoadBoundaryMsg_road_5fboundary_2eproto}, {
      &scc_info_CloudMapperMsg_road_5fboundary_2eproto.base,
      &scc_info_BinReaderMsg_road_5fboundary_2eproto.base,
      &scc_info_GroundSegmentationMsg_road_5fboundary_2eproto.base,
      &scc_info_FeaturePointsMsg_road_5fboundary_2eproto.base,
      &scc_info_BoundaryPointsMsg_road_5fboundary_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_road_5fboundary_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_road_5fboundary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_road_5fboundary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_road_5fboundary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, cloudmappermsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, binreadermsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, groundsegmentationmsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, featurepointsmsg_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::RoadBoundaryMsg, boundarypointsmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, lowerbound_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, upperbound_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::CloudMapperMsg, nscanrings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BinReaderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BinReaderMsg, bindir_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BinReaderMsg, framenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::GroundSegmentationMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::GroundSegmentationMsg, segthres_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightmaxthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightminthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightregion_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, heightsigmathre_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, curvatureregion_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, curvaturethres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, distancehorizonthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, distanceverticalthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, angularres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, useverticle_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::FeaturePointsMsg, usehorizon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, varthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, meanthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, gridnum_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, gridres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, curvefitthres_),
  PROTOBUF_FIELD_OFFSET(::RoadBoundary::BoundaryPointsMsg, usecurveransac_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RoadBoundary::RoadBoundaryMsg)},
  { 10, -1, sizeof(::RoadBoundary::CloudMapperMsg)},
  { 18, -1, sizeof(::RoadBoundary::BinReaderMsg)},
  { 25, -1, sizeof(::RoadBoundary::GroundSegmentationMsg)},
  { 31, -1, sizeof(::RoadBoundary::FeaturePointsMsg)},
  { 47, -1, sizeof(::RoadBoundary::BoundaryPointsMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_RoadBoundaryMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_CloudMapperMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_BinReaderMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_GroundSegmentationMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_FeaturePointsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadBoundary::_BoundaryPointsMsg_default_instance_),
};

const char descriptor_table_protodef_road_5fboundary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023road_boundary.proto\022\014RoadBoundary\"\263\002\n\017"
  "RoadBoundaryMsg\0224\n\016cloudMapperMsg\030\001 \001(\0132"
  "\034.RoadBoundary.CloudMapperMsg\0220\n\014binRead"
  "erMsg\030\002 \001(\0132\032.RoadBoundary.BinReaderMsg\022"
  "B\n\025groundSegmentationMsg\030\003 \001(\0132#.RoadBou"
  "ndary.GroundSegmentationMsg\0228\n\020featurePo"
  "intsMsg\030\004 \001(\0132\036.RoadBoundary.FeaturePoin"
  "tsMsg\022:\n\021boundaryPointsMsg\030\005 \001(\0132\037.RoadB"
  "oundary.BoundaryPointsMsg\"L\n\016CloudMapper"
  "Msg\022\022\n\nlowerBound\030\001 \001(\002\022\022\n\nupperBound\030\002 "
  "\001(\002\022\022\n\nnScanRings\030\003 \001(\005\"0\n\014BinReaderMsg\022"
  "\016\n\006binDir\030\001 \001(\t\022\020\n\010frameNum\030\002 \001(\005\")\n\025Gro"
  "undSegmentationMsg\022\020\n\010segThres\030\001 \001(\002\"\234\002\n"
  "\020FeaturePointsMsg\022\026\n\016heightMaxThres\030\001 \001("
  "\002\022\026\n\016heightMinThres\030\002 \001(\002\022\024\n\014heightRegio"
  "n\030\003 \001(\005\022\027\n\017heightSigmaThre\030\004 \001(\002\022\027\n\017curv"
  "atureRegion\030\005 \001(\005\022\026\n\016curvatureThres\030\006 \001("
  "\002\022\034\n\024distanceHorizonThres\030\007 \001(\002\022\035\n\025dista"
  "nceVerticalThres\030\010 \001(\002\022\022\n\nangularRes\030\t \001"
  "(\002\022\023\n\013useVerticle\030\n \001(\010\022\022\n\nuseHorizon\030\013 "
  "\001(\010\"\211\001\n\021BoundaryPointsMsg\022\020\n\010varThres\030\001 "
  "\001(\002\022\021\n\tmeanThres\030\002 \001(\002\022\017\n\007gridNum\030\003 \001(\005\022"
  "\017\n\007gridRes\030\004 \001(\002\022\025\n\rcurveFitThres\030\005 \001(\002\022"
  "\026\n\016useCurveRansac\030\006 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_road_5fboundary_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_road_5fboundary_2eproto_sccs[6] = {
  &scc_info_BinReaderMsg_road_5fboundary_2eproto.base,
  &scc_info_BoundaryPointsMsg_road_5fboundary_2eproto.base,
  &scc_info_CloudMapperMsg_road_5fboundary_2eproto.base,
  &scc_info_FeaturePointsMsg_road_5fboundary_2eproto.base,
  &scc_info_GroundSegmentationMsg_road_5fboundary_2eproto.base,
  &scc_info_RoadBoundaryMsg_road_5fboundary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_road_5fboundary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_road_5fboundary_2eproto = {
  false, false, descriptor_table_protodef_road_5fboundary_2eproto, "road_boundary.proto", 951,
  &descriptor_table_road_5fboundary_2eproto_once, descriptor_table_road_5fboundary_2eproto_sccs, descriptor_table_road_5fboundary_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_road_5fboundary_2eproto::offsets,
  file_level_metadata_road_5fboundary_2eproto, 6, file_level_enum_descriptors_road_5fboundary_2eproto, file_level_service_descriptors_road_5fboundary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_road_5fboundary_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_road_5fboundary_2eproto)), true);
namespace RoadBoundary {

// ===================================================================

class RoadBoundaryMsg::_Internal {
 public:
  static const ::RoadBoundary::CloudMapperMsg& cloudmappermsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::BinReaderMsg& binreadermsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::GroundSegmentationMsg& groundsegmentationmsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::FeaturePointsMsg& featurepointsmsg(const RoadBoundaryMsg* msg);
  static const ::RoadBoundary::BoundaryPointsMsg& boundarypointsmsg(const RoadBoundaryMsg* msg);
};

const ::RoadBoundary::CloudMapperMsg&
RoadBoundaryMsg::_Internal::cloudmappermsg(const RoadBoundaryMsg* msg) {
  return *msg->cloudmappermsg_;
}
const ::RoadBoundary::BinReaderMsg&
RoadBoundaryMsg::_Internal::binreadermsg(const RoadBoundaryMsg* msg) {
  return *msg->binreadermsg_;
}
const ::RoadBoundary::GroundSegmentationMsg&
RoadBoundaryMsg::_Internal::groundsegmentationmsg(const RoadBoundaryMsg* msg) {
  return *msg->groundsegmentationmsg_;
}
const ::RoadBoundary::FeaturePointsMsg&
RoadBoundaryMsg::_Internal::featurepointsmsg(const RoadBoundaryMsg* msg) {
  return *msg->featurepointsmsg_;
}
const ::RoadBoundary::BoundaryPointsMsg&
RoadBoundaryMsg::_Internal::boundarypointsmsg(const RoadBoundaryMsg* msg) {
  return *msg->boundarypointsmsg_;
}
RoadBoundaryMsg::RoadBoundaryMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadBoundary.RoadBoundaryMsg)
}
RoadBoundaryMsg::RoadBoundaryMsg(const RoadBoundaryMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cloudmappermsg()) {
    cloudmappermsg_ = new ::RoadBoundary::CloudMapperMsg(*from.cloudmappermsg_);
  } else {
    cloudmappermsg_ = nullptr;
  }
  if (from._internal_has_binreadermsg()) {
    binreadermsg_ = new ::RoadBoundary::BinReaderMsg(*from.binreadermsg_);
  } else {
    binreadermsg_ = nullptr;
  }
  if (from._internal_has_groundsegmentationmsg()) {
    groundsegmentationmsg_ = new ::RoadBoundary::GroundSegmentationMsg(*from.groundsegmentationmsg_);
  } else {
    groundsegmentationmsg_ = nullptr;
  }
  if (from._internal_has_featurepointsmsg()) {
    featurepointsmsg_ = new ::RoadBoundary::FeaturePointsMsg(*from.featurepointsmsg_);
  } else {
    featurepointsmsg_ = nullptr;
  }
  if (from._internal_has_boundarypointsmsg()) {
    boundarypointsmsg_ = new ::RoadBoundary::BoundaryPointsMsg(*from.boundarypointsmsg_);
  } else {
    boundarypointsmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.RoadBoundaryMsg)
}

void RoadBoundaryMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadBoundaryMsg_road_5fboundary_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cloudmappermsg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&boundarypointsmsg_) -
      reinterpret_cast<char*>(&cloudmappermsg_)) + sizeof(boundarypointsmsg_));
}

RoadBoundaryMsg::~RoadBoundaryMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.RoadBoundaryMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadBoundaryMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cloudmappermsg_;
  if (this != internal_default_instance()) delete binreadermsg_;
  if (this != internal_default_instance()) delete groundsegmentationmsg_;
  if (this != internal_default_instance()) delete featurepointsmsg_;
  if (this != internal_default_instance()) delete boundarypointsmsg_;
}

void RoadBoundaryMsg::ArenaDtor(void* object) {
  RoadBoundaryMsg* _this = reinterpret_cast< RoadBoundaryMsg* >(object);
  (void)_this;
}
void RoadBoundaryMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadBoundaryMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadBoundaryMsg& RoadBoundaryMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadBoundaryMsg_road_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void RoadBoundaryMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.RoadBoundaryMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cloudmappermsg_ != nullptr) {
    delete cloudmappermsg_;
  }
  cloudmappermsg_ = nullptr;
  if (GetArena() == nullptr && binreadermsg_ != nullptr) {
    delete binreadermsg_;
  }
  binreadermsg_ = nullptr;
  if (GetArena() == nullptr && groundsegmentationmsg_ != nullptr) {
    delete groundsegmentationmsg_;
  }
  groundsegmentationmsg_ = nullptr;
  if (GetArena() == nullptr && featurepointsmsg_ != nullptr) {
    delete featurepointsmsg_;
  }
  featurepointsmsg_ = nullptr;
  if (GetArena() == nullptr && boundarypointsmsg_ != nullptr) {
    delete boundarypointsmsg_;
  }
  boundarypointsmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadBoundaryMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloudmappermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_binreadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_groundsegmentationmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_featurepointsmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundarypointsmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadBoundaryMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.RoadBoundaryMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
  if (this->has_cloudmappermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cloudmappermsg(this), target, stream);
  }

  // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
  if (this->has_binreadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::binreadermsg(this), target, stream);
  }

  // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
  if (this->has_groundsegmentationmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::groundsegmentationmsg(this), target, stream);
  }

  // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
  if (this->has_featurepointsmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::featurepointsmsg(this), target, stream);
  }

  // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
  if (this->has_boundarypointsmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::boundarypointsmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.RoadBoundaryMsg)
  return target;
}

size_t RoadBoundaryMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.RoadBoundaryMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RoadBoundary.CloudMapperMsg cloudMapperMsg = 1;
  if (this->has_cloudmappermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloudmappermsg_);
  }

  // .RoadBoundary.BinReaderMsg binReaderMsg = 2;
  if (this->has_binreadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *binreadermsg_);
  }

  // .RoadBoundary.GroundSegmentationMsg groundSegmentationMsg = 3;
  if (this->has_groundsegmentationmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groundsegmentationmsg_);
  }

  // .RoadBoundary.FeaturePointsMsg featurePointsMsg = 4;
  if (this->has_featurepointsmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *featurepointsmsg_);
  }

  // .RoadBoundary.BoundaryPointsMsg boundaryPointsMsg = 5;
  if (this->has_boundarypointsmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundarypointsmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadBoundaryMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.RoadBoundaryMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadBoundaryMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadBoundaryMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.RoadBoundaryMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.RoadBoundaryMsg)
    MergeFrom(*source);
  }
}

void RoadBoundaryMsg::MergeFrom(const RoadBoundaryMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.RoadBoundaryMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cloudmappermsg()) {
    _internal_mutable_cloudmappermsg()->::RoadBoundary::CloudMapperMsg::MergeFrom(from._internal_cloudmappermsg());
  }
  if (from.has_binreadermsg()) {
    _internal_mutable_binreadermsg()->::RoadBoundary::BinReaderMsg::MergeFrom(from._internal_binreadermsg());
  }
  if (from.has_groundsegmentationmsg()) {
    _internal_mutable_groundsegmentationmsg()->::RoadBoundary::GroundSegmentationMsg::MergeFrom(from._internal_groundsegmentationmsg());
  }
  if (from.has_featurepointsmsg()) {
    _internal_mutable_featurepointsmsg()->::RoadBoundary::FeaturePointsMsg::MergeFrom(from._internal_featurepointsmsg());
  }
  if (from.has_boundarypointsmsg()) {
    _internal_mutable_boundarypointsmsg()->::RoadBoundary::BoundaryPointsMsg::MergeFrom(from._internal_boundarypointsmsg());
  }
}

void RoadBoundaryMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.RoadBoundaryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundaryMsg::CopyFrom(const RoadBoundaryMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.RoadBoundaryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundaryMsg::IsInitialized() const {
  return true;
}

void RoadBoundaryMsg::InternalSwap(RoadBoundaryMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadBoundaryMsg, boundarypointsmsg_)
      + sizeof(RoadBoundaryMsg::boundarypointsmsg_)
      - PROTOBUF_FIELD_OFFSET(RoadBoundaryMsg, cloudmappermsg_)>(
          reinterpret_cast<char*>(&cloudmappermsg_),
          reinterpret_cast<char*>(&other->cloudmappermsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadBoundaryMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloudMapperMsg::_Internal {
 public:
};

CloudMapperMsg::CloudMapperMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadBoundary.CloudMapperMsg)
}
CloudMapperMsg::CloudMapperMsg(const CloudMapperMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lowerbound_, &from.lowerbound_,
    static_cast<size_t>(reinterpret_cast<char*>(&nscanrings_) -
    reinterpret_cast<char*>(&lowerbound_)) + sizeof(nscanrings_));
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.CloudMapperMsg)
}

void CloudMapperMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lowerbound_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nscanrings_) -
      reinterpret_cast<char*>(&lowerbound_)) + sizeof(nscanrings_));
}

CloudMapperMsg::~CloudMapperMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.CloudMapperMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloudMapperMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloudMapperMsg::ArenaDtor(void* object) {
  CloudMapperMsg* _this = reinterpret_cast< CloudMapperMsg* >(object);
  (void)_this;
}
void CloudMapperMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloudMapperMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudMapperMsg& CloudMapperMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudMapperMsg_road_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void CloudMapperMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.CloudMapperMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lowerbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nscanrings_) -
      reinterpret_cast<char*>(&lowerbound_)) + sizeof(nscanrings_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudMapperMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lowerBound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lowerbound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float upperBound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          upperbound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nScanRings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nscanrings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudMapperMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.CloudMapperMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lowerBound = 1;
  if (!(this->lowerbound() <= 0 && this->lowerbound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_lowerbound(), target);
  }

  // float upperBound = 2;
  if (!(this->upperbound() <= 0 && this->upperbound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_upperbound(), target);
  }

  // int32 nScanRings = 3;
  if (this->nscanrings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nscanrings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.CloudMapperMsg)
  return target;
}

size_t CloudMapperMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.CloudMapperMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float lowerBound = 1;
  if (!(this->lowerbound() <= 0 && this->lowerbound() >= 0)) {
    total_size += 1 + 4;
  }

  // float upperBound = 2;
  if (!(this->upperbound() <= 0 && this->upperbound() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nScanRings = 3;
  if (this->nscanrings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nscanrings());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudMapperMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.CloudMapperMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudMapperMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudMapperMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.CloudMapperMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.CloudMapperMsg)
    MergeFrom(*source);
  }
}

void CloudMapperMsg::MergeFrom(const CloudMapperMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.CloudMapperMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lowerbound() <= 0 && from.lowerbound() >= 0)) {
    _internal_set_lowerbound(from._internal_lowerbound());
  }
  if (!(from.upperbound() <= 0 && from.upperbound() >= 0)) {
    _internal_set_upperbound(from._internal_upperbound());
  }
  if (from.nscanrings() != 0) {
    _internal_set_nscanrings(from._internal_nscanrings());
  }
}

void CloudMapperMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.CloudMapperMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudMapperMsg::CopyFrom(const CloudMapperMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.CloudMapperMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudMapperMsg::IsInitialized() const {
  return true;
}

void CloudMapperMsg::InternalSwap(CloudMapperMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloudMapperMsg, nscanrings_)
      + sizeof(CloudMapperMsg::nscanrings_)
      - PROTOBUF_FIELD_OFFSET(CloudMapperMsg, lowerbound_)>(
          reinterpret_cast<char*>(&lowerbound_),
          reinterpret_cast<char*>(&other->lowerbound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudMapperMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BinReaderMsg::_Internal {
 public:
};

BinReaderMsg::BinReaderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadBoundary.BinReaderMsg)
}
BinReaderMsg::BinReaderMsg(const BinReaderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bindir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bindir().empty()) {
    bindir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bindir(), 
      GetArena());
  }
  framenum_ = from.framenum_;
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.BinReaderMsg)
}

void BinReaderMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinReaderMsg_road_5fboundary_2eproto.base);
  bindir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framenum_ = 0;
}

BinReaderMsg::~BinReaderMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.BinReaderMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinReaderMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bindir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BinReaderMsg::ArenaDtor(void* object) {
  BinReaderMsg* _this = reinterpret_cast< BinReaderMsg* >(object);
  (void)_this;
}
void BinReaderMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinReaderMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinReaderMsg& BinReaderMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinReaderMsg_road_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void BinReaderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.BinReaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bindir_.ClearToEmpty();
  framenum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinReaderMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string binDir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bindir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadBoundary.BinReaderMsg.binDir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frameNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          framenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinReaderMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.BinReaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string binDir = 1;
  if (this->bindir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bindir().data(), static_cast<int>(this->_internal_bindir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoadBoundary.BinReaderMsg.binDir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bindir(), target);
  }

  // int32 frameNum = 2;
  if (this->framenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_framenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.BinReaderMsg)
  return target;
}

size_t BinReaderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.BinReaderMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string binDir = 1;
  if (this->bindir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bindir());
  }

  // int32 frameNum = 2;
  if (this->framenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_framenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinReaderMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.BinReaderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BinReaderMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinReaderMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.BinReaderMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.BinReaderMsg)
    MergeFrom(*source);
  }
}

void BinReaderMsg::MergeFrom(const BinReaderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.BinReaderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bindir().size() > 0) {
    _internal_set_bindir(from._internal_bindir());
  }
  if (from.framenum() != 0) {
    _internal_set_framenum(from._internal_framenum());
  }
}

void BinReaderMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.BinReaderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinReaderMsg::CopyFrom(const BinReaderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.BinReaderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinReaderMsg::IsInitialized() const {
  return true;
}

void BinReaderMsg::InternalSwap(BinReaderMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bindir_.Swap(&other->bindir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(framenum_, other->framenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinReaderMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GroundSegmentationMsg::_Internal {
 public:
};

GroundSegmentationMsg::GroundSegmentationMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadBoundary.GroundSegmentationMsg)
}
GroundSegmentationMsg::GroundSegmentationMsg(const GroundSegmentationMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  segthres_ = from.segthres_;
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.GroundSegmentationMsg)
}

void GroundSegmentationMsg::SharedCtor() {
  segthres_ = 0;
}

GroundSegmentationMsg::~GroundSegmentationMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.GroundSegmentationMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroundSegmentationMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroundSegmentationMsg::ArenaDtor(void* object) {
  GroundSegmentationMsg* _this = reinterpret_cast< GroundSegmentationMsg* >(object);
  (void)_this;
}
void GroundSegmentationMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroundSegmentationMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundSegmentationMsg& GroundSegmentationMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundSegmentationMsg_road_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void GroundSegmentationMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.GroundSegmentationMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segthres_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroundSegmentationMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float segThres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          segthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundSegmentationMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.GroundSegmentationMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float segThres = 1;
  if (!(this->segthres() <= 0 && this->segthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_segthres(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.GroundSegmentationMsg)
  return target;
}

size_t GroundSegmentationMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.GroundSegmentationMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float segThres = 1;
  if (!(this->segthres() <= 0 && this->segthres() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundSegmentationMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.GroundSegmentationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundSegmentationMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundSegmentationMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.GroundSegmentationMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.GroundSegmentationMsg)
    MergeFrom(*source);
  }
}

void GroundSegmentationMsg::MergeFrom(const GroundSegmentationMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.GroundSegmentationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.segthres() <= 0 && from.segthres() >= 0)) {
    _internal_set_segthres(from._internal_segthres());
  }
}

void GroundSegmentationMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.GroundSegmentationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundSegmentationMsg::CopyFrom(const GroundSegmentationMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.GroundSegmentationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundSegmentationMsg::IsInitialized() const {
  return true;
}

void GroundSegmentationMsg::InternalSwap(GroundSegmentationMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(segthres_, other->segthres_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundSegmentationMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeaturePointsMsg::_Internal {
 public:
};

FeaturePointsMsg::FeaturePointsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadBoundary.FeaturePointsMsg)
}
FeaturePointsMsg::FeaturePointsMsg(const FeaturePointsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heightmaxthres_, &from.heightmaxthres_,
    static_cast<size_t>(reinterpret_cast<char*>(&usehorizon_) -
    reinterpret_cast<char*>(&heightmaxthres_)) + sizeof(usehorizon_));
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.FeaturePointsMsg)
}

void FeaturePointsMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&heightmaxthres_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&usehorizon_) -
      reinterpret_cast<char*>(&heightmaxthres_)) + sizeof(usehorizon_));
}

FeaturePointsMsg::~FeaturePointsMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.FeaturePointsMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeaturePointsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeaturePointsMsg::ArenaDtor(void* object) {
  FeaturePointsMsg* _this = reinterpret_cast< FeaturePointsMsg* >(object);
  (void)_this;
}
void FeaturePointsMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeaturePointsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeaturePointsMsg& FeaturePointsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeaturePointsMsg_road_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void FeaturePointsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.FeaturePointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heightmaxthres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usehorizon_) -
      reinterpret_cast<char*>(&heightmaxthres_)) + sizeof(usehorizon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeaturePointsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float heightMaxThres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          heightmaxthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heightMinThres = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          heightminthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 heightRegion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heightregion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heightSigmaThre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          heightsigmathre_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 curvatureRegion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curvatureregion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float curvatureThres = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          curvaturethres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distanceHorizonThres = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          distancehorizonthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distanceVerticalThres = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          distanceverticalthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angularRes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          angularres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool useVerticle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          useverticle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useHorizon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          usehorizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeaturePointsMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.FeaturePointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float heightMaxThres = 1;
  if (!(this->heightmaxthres() <= 0 && this->heightmaxthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_heightmaxthres(), target);
  }

  // float heightMinThres = 2;
  if (!(this->heightminthres() <= 0 && this->heightminthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_heightminthres(), target);
  }

  // int32 heightRegion = 3;
  if (this->heightregion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heightregion(), target);
  }

  // float heightSigmaThre = 4;
  if (!(this->heightsigmathre() <= 0 && this->heightsigmathre() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_heightsigmathre(), target);
  }

  // int32 curvatureRegion = 5;
  if (this->curvatureregion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_curvatureregion(), target);
  }

  // float curvatureThres = 6;
  if (!(this->curvaturethres() <= 0 && this->curvaturethres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_curvaturethres(), target);
  }

  // float distanceHorizonThres = 7;
  if (!(this->distancehorizonthres() <= 0 && this->distancehorizonthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_distancehorizonthres(), target);
  }

  // float distanceVerticalThres = 8;
  if (!(this->distanceverticalthres() <= 0 && this->distanceverticalthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_distanceverticalthres(), target);
  }

  // float angularRes = 9;
  if (!(this->angularres() <= 0 && this->angularres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_angularres(), target);
  }

  // bool useVerticle = 10;
  if (this->useverticle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_useverticle(), target);
  }

  // bool useHorizon = 11;
  if (this->usehorizon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_usehorizon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.FeaturePointsMsg)
  return target;
}

size_t FeaturePointsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.FeaturePointsMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float heightMaxThres = 1;
  if (!(this->heightmaxthres() <= 0 && this->heightmaxthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float heightMinThres = 2;
  if (!(this->heightminthres() <= 0 && this->heightminthres() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 heightRegion = 3;
  if (this->heightregion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heightregion());
  }

  // float heightSigmaThre = 4;
  if (!(this->heightsigmathre() <= 0 && this->heightsigmathre() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 curvatureRegion = 5;
  if (this->curvatureregion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curvatureregion());
  }

  // float curvatureThres = 6;
  if (!(this->curvaturethres() <= 0 && this->curvaturethres() >= 0)) {
    total_size += 1 + 4;
  }

  // float distanceHorizonThres = 7;
  if (!(this->distancehorizonthres() <= 0 && this->distancehorizonthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float distanceVerticalThres = 8;
  if (!(this->distanceverticalthres() <= 0 && this->distanceverticalthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float angularRes = 9;
  if (!(this->angularres() <= 0 && this->angularres() >= 0)) {
    total_size += 1 + 4;
  }

  // bool useVerticle = 10;
  if (this->useverticle() != 0) {
    total_size += 1 + 1;
  }

  // bool useHorizon = 11;
  if (this->usehorizon() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeaturePointsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.FeaturePointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturePointsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeaturePointsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.FeaturePointsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.FeaturePointsMsg)
    MergeFrom(*source);
  }
}

void FeaturePointsMsg::MergeFrom(const FeaturePointsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.FeaturePointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.heightmaxthres() <= 0 && from.heightmaxthres() >= 0)) {
    _internal_set_heightmaxthres(from._internal_heightmaxthres());
  }
  if (!(from.heightminthres() <= 0 && from.heightminthres() >= 0)) {
    _internal_set_heightminthres(from._internal_heightminthres());
  }
  if (from.heightregion() != 0) {
    _internal_set_heightregion(from._internal_heightregion());
  }
  if (!(from.heightsigmathre() <= 0 && from.heightsigmathre() >= 0)) {
    _internal_set_heightsigmathre(from._internal_heightsigmathre());
  }
  if (from.curvatureregion() != 0) {
    _internal_set_curvatureregion(from._internal_curvatureregion());
  }
  if (!(from.curvaturethres() <= 0 && from.curvaturethres() >= 0)) {
    _internal_set_curvaturethres(from._internal_curvaturethres());
  }
  if (!(from.distancehorizonthres() <= 0 && from.distancehorizonthres() >= 0)) {
    _internal_set_distancehorizonthres(from._internal_distancehorizonthres());
  }
  if (!(from.distanceverticalthres() <= 0 && from.distanceverticalthres() >= 0)) {
    _internal_set_distanceverticalthres(from._internal_distanceverticalthres());
  }
  if (!(from.angularres() <= 0 && from.angularres() >= 0)) {
    _internal_set_angularres(from._internal_angularres());
  }
  if (from.useverticle() != 0) {
    _internal_set_useverticle(from._internal_useverticle());
  }
  if (from.usehorizon() != 0) {
    _internal_set_usehorizon(from._internal_usehorizon());
  }
}

void FeaturePointsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.FeaturePointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturePointsMsg::CopyFrom(const FeaturePointsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.FeaturePointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturePointsMsg::IsInitialized() const {
  return true;
}

void FeaturePointsMsg::InternalSwap(FeaturePointsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeaturePointsMsg, usehorizon_)
      + sizeof(FeaturePointsMsg::usehorizon_)
      - PROTOBUF_FIELD_OFFSET(FeaturePointsMsg, heightmaxthres_)>(
          reinterpret_cast<char*>(&heightmaxthres_),
          reinterpret_cast<char*>(&other->heightmaxthres_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturePointsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoundaryPointsMsg::_Internal {
 public:
};

BoundaryPointsMsg::BoundaryPointsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadBoundary.BoundaryPointsMsg)
}
BoundaryPointsMsg::BoundaryPointsMsg(const BoundaryPointsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&varthres_, &from.varthres_,
    static_cast<size_t>(reinterpret_cast<char*>(&usecurveransac_) -
    reinterpret_cast<char*>(&varthres_)) + sizeof(usecurveransac_));
  // @@protoc_insertion_point(copy_constructor:RoadBoundary.BoundaryPointsMsg)
}

void BoundaryPointsMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&varthres_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&usecurveransac_) -
      reinterpret_cast<char*>(&varthres_)) + sizeof(usecurveransac_));
}

BoundaryPointsMsg::~BoundaryPointsMsg() {
  // @@protoc_insertion_point(destructor:RoadBoundary.BoundaryPointsMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundaryPointsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoundaryPointsMsg::ArenaDtor(void* object) {
  BoundaryPointsMsg* _this = reinterpret_cast< BoundaryPointsMsg* >(object);
  (void)_this;
}
void BoundaryPointsMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundaryPointsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryPointsMsg& BoundaryPointsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryPointsMsg_road_5fboundary_2eproto.base);
  return *internal_default_instance();
}


void BoundaryPointsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadBoundary.BoundaryPointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&varthres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecurveransac_) -
      reinterpret_cast<char*>(&varthres_)) + sizeof(usecurveransac_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryPointsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float varThres = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          varthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float meanThres = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          meanthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 gridNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gridnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gridRes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          gridres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curveFitThres = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          curvefitthres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool useCurveRansac = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          usecurveransac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryPointsMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadBoundary.BoundaryPointsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float varThres = 1;
  if (!(this->varthres() <= 0 && this->varthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_varthres(), target);
  }

  // float meanThres = 2;
  if (!(this->meanthres() <= 0 && this->meanthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_meanthres(), target);
  }

  // int32 gridNum = 3;
  if (this->gridnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gridnum(), target);
  }

  // float gridRes = 4;
  if (!(this->gridres() <= 0 && this->gridres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_gridres(), target);
  }

  // float curveFitThres = 5;
  if (!(this->curvefitthres() <= 0 && this->curvefitthres() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_curvefitthres(), target);
  }

  // bool useCurveRansac = 6;
  if (this->usecurveransac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_usecurveransac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadBoundary.BoundaryPointsMsg)
  return target;
}

size_t BoundaryPointsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadBoundary.BoundaryPointsMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float varThres = 1;
  if (!(this->varthres() <= 0 && this->varthres() >= 0)) {
    total_size += 1 + 4;
  }

  // float meanThres = 2;
  if (!(this->meanthres() <= 0 && this->meanthres() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 gridNum = 3;
  if (this->gridnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridnum());
  }

  // float gridRes = 4;
  if (!(this->gridres() <= 0 && this->gridres() >= 0)) {
    total_size += 1 + 4;
  }

  // float curveFitThres = 5;
  if (!(this->curvefitthres() <= 0 && this->curvefitthres() >= 0)) {
    total_size += 1 + 4;
  }

  // bool useCurveRansac = 6;
  if (this->usecurveransac() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryPointsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadBoundary.BoundaryPointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryPointsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryPointsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadBoundary.BoundaryPointsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadBoundary.BoundaryPointsMsg)
    MergeFrom(*source);
  }
}

void BoundaryPointsMsg::MergeFrom(const BoundaryPointsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadBoundary.BoundaryPointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.varthres() <= 0 && from.varthres() >= 0)) {
    _internal_set_varthres(from._internal_varthres());
  }
  if (!(from.meanthres() <= 0 && from.meanthres() >= 0)) {
    _internal_set_meanthres(from._internal_meanthres());
  }
  if (from.gridnum() != 0) {
    _internal_set_gridnum(from._internal_gridnum());
  }
  if (!(from.gridres() <= 0 && from.gridres() >= 0)) {
    _internal_set_gridres(from._internal_gridres());
  }
  if (!(from.curvefitthres() <= 0 && from.curvefitthres() >= 0)) {
    _internal_set_curvefitthres(from._internal_curvefitthres());
  }
  if (from.usecurveransac() != 0) {
    _internal_set_usecurveransac(from._internal_usecurveransac());
  }
}

void BoundaryPointsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadBoundary.BoundaryPointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPointsMsg::CopyFrom(const BoundaryPointsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadBoundary.BoundaryPointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPointsMsg::IsInitialized() const {
  return true;
}

void BoundaryPointsMsg::InternalSwap(BoundaryPointsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundaryPointsMsg, usecurveransac_)
      + sizeof(BoundaryPointsMsg::usecurveransac_)
      - PROTOBUF_FIELD_OFFSET(BoundaryPointsMsg, varthres_)>(
          reinterpret_cast<char*>(&varthres_),
          reinterpret_cast<char*>(&other->varthres_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryPointsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadBoundary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadBoundary::RoadBoundaryMsg* Arena::CreateMaybeMessage< ::RoadBoundary::RoadBoundaryMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadBoundary::RoadBoundaryMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::CloudMapperMsg* Arena::CreateMaybeMessage< ::RoadBoundary::CloudMapperMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadBoundary::CloudMapperMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::BinReaderMsg* Arena::CreateMaybeMessage< ::RoadBoundary::BinReaderMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadBoundary::BinReaderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::GroundSegmentationMsg* Arena::CreateMaybeMessage< ::RoadBoundary::GroundSegmentationMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadBoundary::GroundSegmentationMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::FeaturePointsMsg* Arena::CreateMaybeMessage< ::RoadBoundary::FeaturePointsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadBoundary::FeaturePointsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadBoundary::BoundaryPointsMsg* Arena::CreateMaybeMessage< ::RoadBoundary::BoundaryPointsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadBoundary::BoundaryPointsMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
